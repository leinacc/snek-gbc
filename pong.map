ROM0 bank #0:
	SECTION: $0000-$000f ($0010 bytes) ["offdirlut"]
	         $0000 = OffDirLUT
	SECTION: $0010-$0017 ($0008 bytes) ["timelut"]
	         $0010 = TimeLUT
	SECTION: $0018-$0037 ($0020 bytes) ["divide"]
	         $0018 = Divide
	         $0020 = Divide.loop7
	         $0025 = Divide.more7
	         $0027 = Divide.less7
	         $002b = Divide.loop8
	         $0032 = Divide.more8
	         $0034 = Divide.less8
	SECTION: $0038-$003a ($0003 bytes) ["crash"]
	         $0038 = Crash
	SECTION: $003b-$003f ($0005 bytes) ["shortset"]
	         $003b = ShortSet.loop
	         $003b = ShortSet
	SECTION: $0040-$0046 ($0007 bytes) ["ivblank"]
	         $0040 = iVBlank
	EMPTY: $0001 byte
	SECTION: $0048-$0048 ($0001 byte) ["istat"]
	         $0048 = iStat
	SECTION: $0049-$004f ($0007 bytes) ["shortcpy"]
	         $0049 = ShortCpy
	         $0049 = ShortCpy.loop
	SECTION: $0050-$0050 ($0001 byte) ["itimer"]
	         $0050 = iTimer
	EMPTY: $0007 bytes
	SECTION: $0058-$0058 ($0001 byte) ["iserial"]
	         $0058 = iSerial
	EMPTY: $0007 bytes
	SECTION: $0060-$0060 ($0001 byte) ["ijoypad"]
	         $0060 = iJoypad
	SECTION: $0061-$00bb ($005b bytes) ["statusbarupdate"]
	         $0061 = StatusbarUpdate
	         $0070 = StatusbarUpdate.scoreLoop
	         $0084 = StatusbarUpdate.lengthLoop
	         $0098 = StatusbarUpdate.timeLoop
	         $00b3 = StatusbarUpdate.pauseLoop
	SECTION: $00bc-$00ff ($0044 bytes) ["score"]
	         $00bc = Score
	         $00d4 = Score.loop
	         $00e4 = Score.max
	         $00ed = AddBonus
	         $00f9 = AddBonus.noOverflow
	SECTION: $0100-$017f ($0080 bytes) ["entry"]
	         $0100 = EntryPoint
	SECTION: $0180-$11b3 ($1034 bytes) ["sgbdata"]
	         $0180 = BorderTiles
	         $09c0 = BorderTilemap
	         $09c0 = BorderTiles.end
	         $10c0 = BorderTilemap.end
	         $10c0 = BorderPalette
	         $10e0 = BorderPalette.end
	         $10e0 = SAttr
	         $10e0 = SAttrTitle
	         $113a = SAttrGame
	         $113a = SAttrTitle.end
	         $1194 = BaseSPal
	         $1194 = SPal
	         $1194 = SAttrGame.end
	         $1194 = SAttrEnd
	         $119c = BaseSPal.end
	         $119c = SnakeSPal
	         $11a4 = SnakeSPal.end
	         $11a4 = BaseCPal
	         $11a4 = SPalEnd
	         $11ac = SnakeCPal
	         $11ac = BaseCPal.end
	         $11b4 = SnakeCPal.end
	SECTION: $11b4-$1643 ($0490 bytes) ["graphics"]
	         $11b4 = Base2bpp
	         $11f4 = Base2bpp.end
	         $11f4 = Statusbar1bpp
	         $12b4 = Arrow2bpp
	         $12b4 = Statusbar1bpp.end
	         $12f4 = Arrow2bpp.end
	         $12f4 = Title1bpp
	         $15c4 = GameOver1bpp
	         $15c4 = Title1bpp.end
	         $1644 = GameOver1bpp.end
	SECTION: $1644-$1803 ($01c0 bytes) ["snaketiles"]
	         $1644 = Snake2bpp
	         $1804 = Snake2bpp.end
	SECTION: $1804-$1aed ($02ea bytes) ["init"]
	         $1804 = Intro
	         $1827 = Intro.loop
	         $184d = ColorCheck
	         $185d = ColorCheck.noColor
	         $1865 = ColorCheck.noModelC
	         $1865 = ColorCheck.modelC
	         $1865 = ColorCheck.noModelNC
	         $1868 = EmuTest
	         $186f = EmuTest.test
	         $1874 = EmuTest.testloop
	         $1879 = !0
	         $18a8 = EmuTest.map
	         $18c4 = EmuTest.loop
	         $18da = Start
	         $18e8 = !1
	         $18f9 = !2
	         $1933 = Start.row
	         $1935 = Start.column
	         $193f = Start.done
	         $19d3 = Start.init
	         $1a60 = Start.loopY
	         $1a62 = Start.loopX
	         $1a62 = Start.loop
	         $1ad9 = TilemapCpy
	         $1ada = TilemapCpy.loop
	SECTION: $1aee-$1dcd ($02e0 bytes) ["tilemaps"]
	         $1aee = GameTilemap
	         $1c56 = GameTilemap.end
	         $1c56 = TitleTilemap
	         $1dbe = GameOverTilemap
	         $1dbe = TitleTilemap.end
	         $1dca = PauseTilemap
	         $1dca = GameOverTilemap.end
	         $1dce = PauseTilemap.end
	SECTION: $1dce-$1fb5 ($01e8 bytes) ["bademuchr"]
	         $1dce = Bad1bpp
	         $1fae = Bad1bpp.end
	         $1fae = BadPal
	         $1fb6 = BadPal.end
	SECTION: $1fb6-$2123 ($016e bytes) ["snake"]
	         $1fb6 = Snake
	         $1fd0 = !5
	         $1fda = !6
	         $2020 = Snake.skipFood
	         $203a = Snake.skipSnake
	         $2049 = SnakeDisplay
	         $2086 = SnakeCollision
	         $2086 = SnakeCollision.loop
	         $2093 = SnakeCollision.skip
	         $2099 = SnakePosDir
	         $20bd = FoodEaten
	         $20c9 = FoodReset
	         $20d0 = FoodReroll
	         $2103 = FoodReroll.failed
	         $210c = Pos2SCRN
	SECTION: $2124-$21e9 ($00c6 bytes) ["main"]
	         $2124 = MainLoop
	         $2132 = MainLoop.loop
	         $214a = MainLoop.skipDebugPalEn
	         $214f = MainLoop.start
	         $215c = MainLoop.gameLoop
	         $2164 = !0
	         $216e = MainLoop.skipDebugPal
	         $219d = MainLoop.pause
	         $21b4 = MainLoop.skip
	         $21c3 = MainLoop.pauseLoop
	         $21db = MainLoop.unpause
	SECTION: $21ea-$223a ($0051 bytes) ["ginit"]
	         $21ea = GameInit
	SECTION: $223b-$227c ($0042 bytes) ["gameover"]
	         $223b = GameOver
	         $224f = GameOver.delay
	         $2265 = GameOver.loop
	SECTION: $227d-$22ba ($003e bytes) ["packet"]
	         $227d = Packet
	         $2286 = Packet.byte
	         $228a = Packet.bit
	SECTION: $22bb-$22f8 ($003e bytes) ["joycheck"]
	         $22bb = JoyCheck
	         $22d7 = !1
	         $22df = !2
	         $22e7 = !3
	         $22ef = !4
	         $22f0 = JoyCheck.done
	SECTION: $22f9-$2336 ($003e bytes) ["vblank"]
	         $22f9 = VBlank
	         $230d = VBlank.loop
	         $2316 = VBlank.return
	         $231f = VBufferPush
	SECTION: $2337-$236e ($0038 bytes) ["registers"]
	         $2337 = EmuRegs
	         $236f = EmuRegs.end
	SECTION: $236f-$23a6 ($0038 bytes) ["popslide"]
	         $236f = Popslide
	         $2376 = Popslide.loop
	SECTION: $23a7-$23d6 ($0030 bytes) ["packets"]
	         $23a7 = Packets.mlt
	         $23a7 = Packets
	         $23a9 = Packets.mask
	         $23ab = Packets.unMask
	         $23ad = Packets.chr
	         $23af = Packets.pct
	         $23b1 = Packets.palTrn
	         $23b3 = Packets.attrTrn
	         $23b5 = Packets.unMlt
	         $23b7 = Packets.palTitle
	         $23c7 = Packets.palGame
	SECTION: $23d7-$23fc ($0026 bytes) ["time"]
	         $23d7 = Time
	         $23e3 = Time.loop
	         $23f2 = Time.max
	SECTION: $23fd-$241e ($0022 bytes) ["length"]
	         $23fd = Length
	         $2406 = Length.loop
	         $2416 = Length.max
	SECTION: $241f-$243c ($001e bytes) ["safeset"]
	         $241f = SafeSet
	         $242b = SafeSet.loop
	SECTION: $243d-$2459 ($001d bytes) ["joy"]
	         $243d = Joy
	         $2442 = Joy.loop
	SECTION: $245a-$2473 ($001a bytes) ["safecpy"]
	         $245a = SafeCpy
	         $2461 = SafeCpy.loop
	SECTION: $2474-$248d ($001a bytes) ["rand"]
	         $2474 = rand
	         $2484 = srand
	SECTION: $248e-$24a0 ($0013 bytes) ["multiply"]
	         $248e = Multiply
	         $2495 = Multiply.loop
	         $2499 = !0
	SECTION: $24a1-$24b1 ($0011 bytes) ["1bppcpy"]
	         $24a1 = SafeCpy1bpp
	         $24a1 = SafeCpy1bpp.loop
	SECTION: $24b2-$24c0 ($000f bytes) ["joycurrent"]
	         $24b2 = JoyCurrent
	         $24bb = JoyCurrent.loop
	SECTION: $24c1-$24cd ($000d bytes) ["memcpy"]
	         $24c1 = MemCpy
	         $24c4 = MemCpy.loop
	SECTION: $24ce-$24d8 ($000b bytes) ["memset"]
	         $24ce = MemSet
	         $24d1 = MemSet.loop
	SECTION: $24d9-$24e0 ($0008 bytes) ["DMA"]
	         $24d9 = DMAcopy
	SECTION: $24e1-$24e8 ($0008 bytes) ["palcpy"]
	         $24e1 = PalCpy
	         $24e3 = PalCpy.loop
	EMPTY: $1b17 bytes
	SLACK: $1b26 bytes

ROMX bank #1:
	SECTION: $4000-$4241 ($0242 bytes) ["devmessage"]
	EMPTY: $3dbe bytes
	SLACK: $3dbe bytes

WRAM0 bank #0:
	SECTION: $c000-$c47f ($0480 bytes) ["tilemapbuffers"]
	         $c000 = wGameTilemap
	         $c200 = wGameTilemap.statusbar
	         $c240 = wTitleTilemap
	         $c240 = wGameTilemap.end
	         $c480 = wTitleTilemap.end
	SECTION: $c480-$c49f ($0020 bytes) ["rampackets"]
	         $c480 = wSPalTitle
	         $c490 = wSPalGame
	         $c493 = wSPalGame.pal
	SECTION: $c4a0-$c4b4 ($0015 bytes) ["gamedata"]
	         $c4a0 = wScore
	         $c4a0 = wGameData
	         $c4a8 = wScore.end
	         $c4a8 = wTime
	         $c4b0 = wLength
	         $c4b0 = wTime.end
	         $c4b3 = wPauses
	         $c4b3 = wLength.end
	         $c4b5 = wPauses.end
	         $c4b5 = wGameDataEnd
	SECTION: $c4b5-$c4b8 ($0004 bytes) ["rand_ram"]
	         $c4b5 = randstate
	EMPTY: $0047 bytes
	SECTION: $c500-$c701 ($0202 bytes) ["snakebuffer"]
	         $c500 = wSnakeBuffer.y
	         $c500 = wSnakeBuffer
	         $c600 = wSnakeBuffer.x
	         $c700 = wSnakeBuffer.head
	         $c701 = wSnakeBuffer.length
	         $c702 = wSnakeBuffer.end
	EMPTY: $00fe bytes
	SECTION: $c800-$c900 ($0101 bytes) ["vbuffer"]
	         $c800 = wVBuffer
	         $c900 = wVBuffer.size
	EMPTY: $00ff bytes
	SECTION: $ca00-$caa0 ($00a1 bytes) ["shadowOAM"]
	         $ca00 = wSOAM
	         $caa0 = wSOAM.index
	EMPTY: $051f bytes
	SECTION: $cfc0-$cfff ($0040 bytes) ["stack"]
	         $cfc0 = wStack
	         $d000 = wStack.origin
	SLACK: $0763 bytes

HRAM bank #0:
	SECTION: $ff80-$ff8c ($000d bytes) ["other"]
	         $ff80 = hFacing
	         $ff80 = hOther
	         $ff81 = hFacing.forbid
	         $ff82 = hDelay
	         $ff83 = hVel.y
	         $ff83 = hVel
	         $ff84 = hVel.x
	         $ff85 = hFood
	         $ff85 = hFood.y
	         $ff86 = hFood.x
	         $ff87 = hFood.fail
	         $ff88 = hBonus
	         $ff8a = hGrading
	         $ff8b = hDebug
	         $ff8c = hConsole
	         $ff8c = hOtherEnd
	SECTION: $ff8d-$ff94 ($0008 bytes) ["hDMA"]
	         $ff8d = hDMA
	         $ff91 = hDMA.wait
	         $ff95 = hDMA.end
	SECTION: $ff95-$ff96 ($0002 bytes) ["joypads"]
	         $ff95 = hP1
	         $ff96 = hP1.x
	EMPTY: $0068 bytes
	SLACK: $0068 bytes

SUMMARY:
	ROM0: 9434 bytes used / 6950 free
	ROMX: 578 bytes used / 15806 free in 1 bank
	WRAM0: 2205 bytes used / 1891 free
	HRAM: 23 bytes used / 104 free
